// Generated by gencpp from file nodes/LegPosition.msg
// DO NOT EDIT!


#ifndef NODES_MESSAGE_LEGPOSITION_H
#define NODES_MESSAGE_LEGPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nodes
{
template <class ContainerAllocator>
struct LegPosition_
{
  typedef LegPosition_<ContainerAllocator> Type;

  LegPosition_()
    : position_hip(0)
    , position_knee(0)  {
    }
  LegPosition_(const ContainerAllocator& _alloc)
    : position_hip(0)
    , position_knee(0)  {
    }



   typedef int32_t _position_hip_type;
  _position_hip_type position_hip;

   typedef int32_t _position_knee_type;
  _position_knee_type position_knee;




  typedef boost::shared_ptr< ::nodes::LegPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodes::LegPosition_<ContainerAllocator> const> ConstPtr;

}; // struct LegPosition_

typedef ::nodes::LegPosition_<std::allocator<void> > LegPosition;

typedef boost::shared_ptr< ::nodes::LegPosition > LegPositionPtr;
typedef boost::shared_ptr< ::nodes::LegPosition const> LegPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nodes::LegPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nodes::LegPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nodes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nodes': ['/home/legged/tns_ros1/controllers/joystick/catkin_ws/src/nodes/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nodes::LegPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nodes::LegPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::LegPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::LegPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::LegPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::LegPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nodes::LegPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "562ed3535144d9f8aa220d6f6ac56b2a";
  }

  static const char* value(const ::nodes::LegPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x562ed3535144d9f8ULL;
  static const uint64_t static_value2 = 0xaa220d6f6ac56b2aULL;
};

template<class ContainerAllocator>
struct DataType< ::nodes::LegPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nodes/LegPosition";
  }

  static const char* value(const ::nodes::LegPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nodes::LegPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 position_hip\n\
int32 position_knee\n\
";
  }

  static const char* value(const ::nodes::LegPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nodes::LegPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_hip);
      stream.next(m.position_knee);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LegPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nodes::LegPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nodes::LegPosition_<ContainerAllocator>& v)
  {
    s << indent << "position_hip: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_hip);
    s << indent << "position_knee: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_knee);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODES_MESSAGE_LEGPOSITION_H
