// Generated by gencpp from file nodes/RobotForces.msg
// DO NOT EDIT!


#ifndef NODES_MESSAGE_ROBOTFORCES_H
#define NODES_MESSAGE_ROBOTFORCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nodes
{
template <class ContainerAllocator>
struct RobotForces_
{
  typedef RobotForces_<ContainerAllocator> Type;

  RobotForces_()
    : realFx(0.0)
    , realFy(0.0)
    , realFz(0.0)
    , realMx(0.0)
    , realMy(0.0)
    , realMz(0.0)  {
    }
  RobotForces_(const ContainerAllocator& _alloc)
    : realFx(0.0)
    , realFy(0.0)
    , realFz(0.0)
    , realMx(0.0)
    , realMy(0.0)
    , realMz(0.0)  {
    }



   typedef double _realFx_type;
  _realFx_type realFx;

   typedef double _realFy_type;
  _realFy_type realFy;

   typedef double _realFz_type;
  _realFz_type realFz;

   typedef double _realMx_type;
  _realMx_type realMx;

   typedef double _realMy_type;
  _realMy_type realMy;

   typedef double _realMz_type;
  _realMz_type realMz;




  typedef boost::shared_ptr< ::nodes::RobotForces_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodes::RobotForces_<ContainerAllocator> const> ConstPtr;

}; // struct RobotForces_

typedef ::nodes::RobotForces_<std::allocator<void> > RobotForces;

typedef boost::shared_ptr< ::nodes::RobotForces > RobotForcesPtr;
typedef boost::shared_ptr< ::nodes::RobotForces const> RobotForcesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nodes::RobotForces_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nodes::RobotForces_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nodes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nodes': ['/home/legged/tns_ros1/controllers/joystick/catkin_ws/src/nodes/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nodes::RobotForces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nodes::RobotForces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::RobotForces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::RobotForces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::RobotForces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::RobotForces_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nodes::RobotForces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a702e78551fb9c4e8be2b729569a6c20";
  }

  static const char* value(const ::nodes::RobotForces_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa702e78551fb9c4eULL;
  static const uint64_t static_value2 = 0x8be2b729569a6c20ULL;
};

template<class ContainerAllocator>
struct DataType< ::nodes::RobotForces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nodes/RobotForces";
  }

  static const char* value(const ::nodes::RobotForces_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nodes::RobotForces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 realFx\n\
float64 realFy\n\
float64 realFz\n\
float64 realMx\n\
float64 realMy\n\
float64 realMz\n\
";
  }

  static const char* value(const ::nodes::RobotForces_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nodes::RobotForces_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.realFx);
      stream.next(m.realFy);
      stream.next(m.realFz);
      stream.next(m.realMx);
      stream.next(m.realMy);
      stream.next(m.realMz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RobotForces_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nodes::RobotForces_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nodes::RobotForces_<ContainerAllocator>& v)
  {
    s << indent << "realFx: ";
    Printer<double>::stream(s, indent + "  ", v.realFx);
    s << indent << "realFy: ";
    Printer<double>::stream(s, indent + "  ", v.realFy);
    s << indent << "realFz: ";
    Printer<double>::stream(s, indent + "  ", v.realFz);
    s << indent << "realMx: ";
    Printer<double>::stream(s, indent + "  ", v.realMx);
    s << indent << "realMy: ";
    Printer<double>::stream(s, indent + "  ", v.realMy);
    s << indent << "realMz: ";
    Printer<double>::stream(s, indent + "  ", v.realMz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODES_MESSAGE_ROBOTFORCES_H
