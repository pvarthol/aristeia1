// Generated by gencpp from file nodes/supervisor_start_movieRequest.msg
// DO NOT EDIT!


#ifndef NODES_MESSAGE_SUPERVISOR_START_MOVIEREQUEST_H
#define NODES_MESSAGE_SUPERVISOR_START_MOVIEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nodes
{
template <class ContainerAllocator>
struct supervisor_start_movieRequest_
{
  typedef supervisor_start_movieRequest_<ContainerAllocator> Type;

  supervisor_start_movieRequest_()
    : filename()
    , width(0)
    , height(0)
    , codec(0)
    , quality(0)
    , acceleration(0)
    , caption(0)  {
    }
  supervisor_start_movieRequest_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , width(0)
    , height(0)
    , codec(0)
    , quality(0)
    , acceleration(0)
    , caption(0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _codec_type;
  _codec_type codec;

   typedef int32_t _quality_type;
  _quality_type quality;

   typedef int32_t _acceleration_type;
  _acceleration_type acceleration;

   typedef uint8_t _caption_type;
  _caption_type caption;




  typedef boost::shared_ptr< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> const> ConstPtr;

}; // struct supervisor_start_movieRequest_

typedef ::nodes::supervisor_start_movieRequest_<std::allocator<void> > supervisor_start_movieRequest;

typedef boost::shared_ptr< ::nodes::supervisor_start_movieRequest > supervisor_start_movieRequestPtr;
typedef boost::shared_ptr< ::nodes::supervisor_start_movieRequest const> supervisor_start_movieRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nodes::supervisor_start_movieRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nodes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nodes': ['/home/legged/tns_ros1/controllers/joystick/catkin_ws/src/nodes/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6002a2a6b3b34251dd3d092b3750f050";
  }

  static const char* value(const ::nodes::supervisor_start_movieRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6002a2a6b3b34251ULL;
  static const uint64_t static_value2 = 0xdd3d092b3750f050ULL;
};

template<class ContainerAllocator>
struct DataType< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nodes/supervisor_start_movieRequest";
  }

  static const char* value(const ::nodes::supervisor_start_movieRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string filename\n\
int32 width\n\
int32 height\n\
int32 codec\n\
int32 quality\n\
int32 acceleration\n\
uint8 caption\n\
";
  }

  static const char* value(const ::nodes::supervisor_start_movieRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.codec);
      stream.next(m.quality);
      stream.next(m.acceleration);
      stream.next(m.caption);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct supervisor_start_movieRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nodes::supervisor_start_movieRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nodes::supervisor_start_movieRequest_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "codec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.codec);
    s << indent << "quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quality);
    s << indent << "acceleration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acceleration);
    s << indent << "caption: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.caption);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODES_MESSAGE_SUPERVISOR_START_MOVIEREQUEST_H
