"""autogenerated by genpy from nodes/LegEncoders.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LegEncoders(genpy.Message):
  _md5sum = "2428b7988b7e9806ee8266e94510f7cb"
  _type = "nodes/LegEncoders"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 encoder_hip
uint32 encoder_knee
uint32 encoder_heel
uint32 encoder_spring
"""
  __slots__ = ['encoder_hip','encoder_knee','encoder_heel','encoder_spring']
  _slot_types = ['uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       encoder_hip,encoder_knee,encoder_heel,encoder_spring

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LegEncoders, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.encoder_hip is None:
        self.encoder_hip = 0
      if self.encoder_knee is None:
        self.encoder_knee = 0
      if self.encoder_heel is None:
        self.encoder_heel = 0
      if self.encoder_spring is None:
        self.encoder_spring = 0
    else:
      self.encoder_hip = 0
      self.encoder_knee = 0
      self.encoder_heel = 0
      self.encoder_spring = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.encoder_hip, _x.encoder_knee, _x.encoder_heel, _x.encoder_spring))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.encoder_hip, _x.encoder_knee, _x.encoder_heel, _x.encoder_spring,) = _struct_4I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.encoder_hip, _x.encoder_knee, _x.encoder_heel, _x.encoder_spring))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.encoder_hip, _x.encoder_knee, _x.encoder_heel, _x.encoder_spring,) = _struct_4I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4I = struct.Struct("<4I")
